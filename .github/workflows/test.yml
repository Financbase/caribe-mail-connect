name: Automated Testing Pipeline
# Source Control + CI/CD - Automated Testing Pipeline
# Configure GitHub Actions for automated test runs on PRs

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, develop]
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # =====================================================
  # SETUP AND VALIDATION
  # =====================================================
  setup:
    name: Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup.outputs.node-version }}
      pnpm-version: ${{ steps.setup.outputs.pnpm-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate package.json
        run: pnpm audit --audit-level moderate

      - id: setup
        run: |
          echo "node-version=${{ env.NODE_VERSION }}" >> $GITHUB_OUTPUT
          echo "pnpm-version=${{ env.PNPM_VERSION }}" >> $GITHUB_OUTPUT

  # =====================================================
  # CODE QUALITY CHECKS
  # =====================================================
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Check Prettier formatting
        run: pnpm format:check

      - name: Check for unused dependencies
        run: pnpm depcheck

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: pnpm type-check

  # =====================================================
  # BUILD VERIFICATION
  # =====================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Check build size
        run: |
          echo "Build completed successfully"
          du -sh dist/
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # =====================================================
  # UNIT AND INTEGRATION TESTS
  # =====================================================
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ${{ matrix.test-type }} tests
        run: pnpm test:${{ matrix.test-type }} --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage

  # =====================================================
  # END-TO-END TESTS
  # =====================================================
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Start preview server
        run: pnpm preview &
        env:
          PORT: 4173

      - name: Wait for server
        run: npx wait-on http://localhost:4173

      - name: Run Playwright tests
        run: pnpm test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # =====================================================
  # SECURITY SCANNING
  # =====================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for known vulnerabilities
        run: pnpm audit --audit-level moderate

      - name: Check for outdated dependencies
        run: pnpm outdated || true

  # =====================================================
  # PERFORMANCE TESTING
  # =====================================================
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # =====================================================
  # TEST SUMMARY
  # =====================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, build, test, e2e, security-scan, dependency-check]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "E2E: ${{ needs.e2e.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Dependencies: ${{ needs.dependency-check.result }}"

      - name: Fail if any required check failed
        if: |
          needs.lint.result == 'failure' ||
          needs.type-check.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.e2e.result == 'failure' ||
          needs.security-scan.result == 'failure' ||
          needs.dependency-check.result == 'failure'
        run: exit 1

      - name: Success message
        if: success()
        run: echo "All tests passed successfully! ✅"

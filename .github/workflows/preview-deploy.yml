name: Preview Deployments
# Source Control + CI/CD - Preview Deployments
# Set up Cloudflare Pages preview deployments for every PR

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # =====================================================
  # BUILD FOR PREVIEW
  # =====================================================
  build-preview:
    name: Build Preview Application
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}
      deployment-id: ${{ steps.deploy.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application for preview
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_APP_ENV: preview
          VITE_PREVIEW_MODE: true
          VITE_BRANCH_NAME: ${{ github.head_ref }}
          VITE_COMMIT_SHA: ${{ github.sha }}
          VITE_PR_NUMBER: ${{ github.event.number }}

      - name: Add preview metadata
        run: |
          echo '{"branch":"${{ github.head_ref }}","commit":"${{ github.sha }}","pr":"${{ github.event.number }}","timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)"}' > dist/preview-metadata.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: preview-build
          path: dist/
          retention-days: 7

      # =====================================================
      # DEPLOY TO CLOUDFLARE PAGES
      # =====================================================
      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: prmcms-preview
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Create deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'preview',
              description: 'Preview deployment for PR #${{ github.event.number }}',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Preview deployment successful'
            });

  # =====================================================
  # PREVIEW TESTING
  # =====================================================
  test-preview:
    name: Test Preview Deployment
    runs-on: ubuntu-latest
    needs: build-preview
    if: needs.build-preview.outputs.preview-url
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Wait for deployment
        run: |
          echo "Waiting for preview deployment to be ready..."
          npx wait-on ${{ needs.build-preview.outputs.preview-url }} --timeout 300000

      - name: Run smoke tests on preview
        run: pnpm test:e2e:preview
        env:
          PREVIEW_URL: ${{ needs.build-preview.outputs.preview-url }}

      - name: Run Lighthouse audit on preview
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_SERVER_BASE_URL: ${{ needs.build-preview.outputs.preview-url }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: preview-test-results
          path: |
            playwright-report/
            lighthouse-results/
          retention-days: 7

  # =====================================================
  # VISUAL REGRESSION TESTING
  # =====================================================
  visual-regression:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    needs: build-preview
    if: needs.build-preview.outputs.preview-url
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Wait for deployment
        run: npx wait-on ${{ needs.build-preview.outputs.preview-url }} --timeout 300000

      - name: Run visual regression tests
        run: pnpm test:visual
        env:
          PREVIEW_URL: ${{ needs.build-preview.outputs.preview-url }}

      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-regression-diffs
          path: test-results/
          retention-days: 7

  # =====================================================
  # SECURITY SCAN ON PREVIEW
  # =====================================================
  security-scan-preview:
    name: Security Scan Preview
    runs-on: ubuntu-latest
    needs: build-preview
    if: needs.build-preview.outputs.preview-url
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: npx wait-on ${{ needs.build-preview.outputs.preview-url }} --timeout 300000

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ needs.build-preview.outputs.preview-url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-scan-results
          path: report_html.html
          retention-days: 7

  # =====================================================
  # COMMENT ON PR
  # =====================================================
  comment-preview:
    name: Comment Preview Links
    runs-on: ubuntu-latest
    needs: [build-preview, test-preview, visual-regression, security-scan-preview]
    if: always() && needs.build-preview.outputs.preview-url
    steps:
      - name: Comment PR with preview links
        uses: actions/github-script@v6
        with:
          script: |
            const previewUrl = '${{ needs.build-preview.outputs.preview-url }}';
            const testStatus = '${{ needs.test-preview.result }}';
            const visualStatus = '${{ needs.visual-regression.result }}';
            const securityStatus = '${{ needs.security-scan-preview.result }}';
            
            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };

            const comment = `## 🚀 Preview Deployment

            **Preview URL:** ${previewUrl}

            ### Test Results
            - **Smoke Tests:** ${statusEmoji(testStatus)} ${testStatus}
            - **Visual Regression:** ${statusEmoji(visualStatus)} ${visualStatus}
            - **Security Scan:** ${statusEmoji(securityStatus)} ${securityStatus}

            ### Quick Links
            - 🔗 [Preview Application](${previewUrl})
            - 📊 [Lighthouse Report](${previewUrl}/lighthouse-report.html)
            - 🔍 [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### Preview Info
            - **Branch:** \`${{ github.head_ref }}\`
            - **Commit:** \`${{ github.sha }}\`
            - **PR:** #${{ github.event.number }}

            ---
            *This preview will be automatically updated when you push new commits to this PR.*`;

            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('🚀 Preview Deployment')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # =====================================================
  # CLEANUP ON PR CLOSE
  # =====================================================
  cleanup-preview:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Delete Cloudflare Pages deployment
        uses: actions/github-script@v6
        with:
          script: |
            // This would typically call Cloudflare API to cleanup
            // For now, we'll just log the cleanup action
            console.log('Preview deployment cleanup triggered for PR #${{ github.event.number }}');

      - name: Comment cleanup notification
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '🧹 Preview deployment has been cleaned up.'
            });

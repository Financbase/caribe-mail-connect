version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://backend:3000
      - REACT_APP_WS_URL=ws://backend:3000
    depends_on:
      - backend
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./security-headers.conf:/etc/nginx/security-headers.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    networks:
      - partner-network

  # Backend API
  backend:
    build:
      context: ./backend-api-setup
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=partner_management
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - ALLOWED_ORIGINS=http://localhost:3000,https://yourdomain.com
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - ENABLE_SWAGGER=false
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend-api-setup/uploads:/app/uploads
      - ./backend-api-setup/logs:/app/logs
    restart: unless-stopped
    networks:
      - partner-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=partner_management
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-api-setup/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    restart: unless-stopped
    networks:
      - partner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - partner-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Alternative to frontend nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./security-headers.conf:/etc/nginx/security-headers.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - partner-network

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - partner-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - partner-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    command: |
      sh -c '
        while true; do
          echo "Creating backup at $(date)"
          pg_dump -h postgres -U postgres -d partner_management > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          gzip /backups/backup_*.sql
          find /backups -name "backup_*.sql.gz" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - partner-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  partner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
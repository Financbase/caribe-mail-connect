import { useState } from 'react';
import { Folder } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/components/ui/use-toast';
import { useLanguage } from '@/contexts/LanguageContext';
import { useDocuments } from '@/hooks/useDocuments';
import type { DocumentFolder } from '@/hooks/useDocuments';

interface CreateFolderDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  folders: DocumentFolder[];
}

export function CreateFolderDialog({ 
  open, 
  onOpenChange, 
  folders
}: CreateFolderDialogProps) {
  const { language } = useLanguage();
  const { createFolder } = useDocuments();
  const { toast } = useToast();
  
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [parentFolderId, setParentFolderId] = useState('');
  const [folderType, setFolderType] = useState('general');
  const [creating, setCreating] = useState(false);

  const isSpanish = language === 'es';

  const folderTypes = [
    { value: 'general', label: isSpanish ? 'General' : 'General' },
    { value: 'customer', label: isSpanish ? 'Cliente' : 'Customer' },
    { value: 'compliance', label: isSpanish ? 'Cumplimiento' : 'Compliance' },
    { value: 'contracts', label: isSpanish ? 'Contratos' : 'Contracts' },
    { value: 'invoices', label: isSpanish ? 'Facturas' : 'Invoices' },
    { value: 'policies', label: isSpanish ? 'Políticas' : 'Policies' },
    { value: 'templates', label: isSpanish ? 'Plantillas' : 'Templates' },
  ];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!name.trim()) {
      toast({
        title: isSpanish ? 'Error' : 'Error',
        description: isSpanish ? 'El nombre es requerido' : 'Name is required',
        variant: 'destructive',
      });
      return;
    }

    setCreating(true);

    try {
      await createFolder({
        name: name.trim(),
        description: description.trim() || undefined,
        parent_folder_id: parentFolderId || undefined,
        folder_type: folderType,
        folder_path: '', // This will be auto-generated by the trigger
      });

      // Reset form
      setName('');
      setDescription('');
      setParentFolderId('');
      setFolderType('general');
      onOpenChange(false);

      toast({
        title: isSpanish ? 'Éxito' : 'Success',
        description: isSpanish 
          ? 'Carpeta creada exitosamente'
          : 'Folder created successfully',
      });
    } catch (error) {
      console.error('Error creating folder:', error);
      toast({
        title: isSpanish ? 'Error' : 'Error',
        description: isSpanish 
          ? 'Error al crear la carpeta'
          : 'Failed to create folder',
        variant: 'destructive',
      });
    } finally {
      setCreating(false);
    }
  };

  const handleCancel = () => {
    setName('');
    setDescription('');
    setParentFolderId('');
    setFolderType('general');
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Folder className="h-5 w-5 text-blue-500" />
            {isSpanish ? 'Crear Nueva Carpeta' : 'Create New Folder'}
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">
              {isSpanish ? 'Nombre' : 'Name'} <span className="text-red-500">*</span>
            </Label>
            <Input
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder={isSpanish ? 'Nombre de la carpeta' : 'Folder name'}
              disabled={creating}
              required
            />
          </div>

          <div>
            <Label htmlFor="description">
              {isSpanish ? 'Descripción' : 'Description'}
            </Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder={isSpanish ? 'Descripción opcional' : 'Optional description'}
              disabled={creating}
              rows={3}
            />
          </div>

          <div>
            <Label htmlFor="parentFolder">
              {isSpanish ? 'Carpeta Padre' : 'Parent Folder'}
            </Label>
            <Select 
              value={parentFolderId} 
              onValueChange={setParentFolderId}
              disabled={creating}
            >
              <SelectTrigger>
                <SelectValue placeholder={isSpanish ? 'Seleccionar carpeta padre (opcional)' : 'Select parent folder (optional)'} />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">
                  {isSpanish ? 'Ninguna (Carpeta raíz)' : 'None (Root folder)'}
                </SelectItem>
                {folders
                  .filter(f => !f.is_system_folder) // Don't allow system folders as parents
                  .map((folder) => (
                    <SelectItem key={folder.id} value={folder.id}>
                      {folder.folder_path}
                    </SelectItem>
                  ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="folderType">
              {isSpanish ? 'Tipo de Carpeta' : 'Folder Type'}
            </Label>
            <Select 
              value={folderType} 
              onValueChange={setFolderType}
              disabled={creating}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {folderTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex justify-end gap-4 pt-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={handleCancel}
              disabled={creating}
            >
              {isSpanish ? 'Cancelar' : 'Cancel'}
            </Button>
            <Button type="submit" disabled={creating || !name.trim()}>
              {creating 
                ? (isSpanish ? 'Creando...' : 'Creating...')
                : (isSpanish ? 'Crear Carpeta' : 'Create Folder')
              }
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}